{"version":3,"sources":["utils/dataProvider.js","components/Header/ShareLinks.js","components/Header/Header.js","components/Footer.js","components/Snowflake/SnowflakeRay.js","components/Snowflake/Snowflake.js","components/SnowflakeCard.js","components/AllSongs.js","components/Navigation/Button.js","components/Song.js","utils/snowflakesBuild.js","components/About.js","App.js","index.js"],"names":["songs","source","map","song","id","Object","assign","songData","sectionTotal","sections","length","groupTotal","groupSize","Math","ceil","maxGroupDuration","duration_ms","currentGroup","currentOrder","currentDuration","forEach","section","idx","order","duration","groupSections","dataProvider","shareText","ShareLinks","currentUrl","window","location","hostname","react_default","a","createElement","className","key","href","concat","index_es","icon","faFacebookF","size","faTwitter","faPinterest","faLinkedin","Header","_ref","_ref$title","title","_ref$singer","singer","_ref$createdByBlock","createdByBlock","Link","to","Header_ShareLinks","Footer","target","rel","buildItem","d","scales","itemHeight","itemHalfWidth","loudness","midPos","slopePos","tempo","prepareScales","Provider","flatMap","item","loudnessRange","d3","scaleLoudness","domain","tempoRange","scaleTempo","range","keys","s","allKeys","sort","f","scaleKey","padding","maxDuration","group","SnowflakeRay","_this2","this","_this$props","props","maximize","animated","updateScales","currentPos","shouldScale","element","start","transform","opacity","react","attributeName","from","fill","begin","dur","repeatCount","type","additive","maxHeight","maxWidth","scaleCoeff","getScaleCoeff","round","_this3","groupHeight","totalGroups","currentSectionHeight","max","React","PureComponent","defaultProps","rays","Snowflake","width","height","Snowflake_SnowflakeRay","angle","SnowflakeCard","components_Snowflake_Snowflake","name","artist","AllSongs","data","components_Header_Header","components_SnowflakeCard","components_Footer","BUTTON_TYPES","getTargetLink","songId","getIcon","faChevronRight","faChevronLeft","NavigationButton","color","scaleValence","Song","state","isSongReady","onSongReady","playVideo","_this","setState","_this$state","lastSong","backgroundPosition","floor","valence","style","Button","YouTube","youtubeId","videoId","onReady","onStateChange","onPlayerStateChanged","params","match","parseInt","snowflakesBuild","groupColor","About","songExample","console","log","sectionExample","armScales","Build","sizeSnowflakes","itemsListScales","itemScales","armAnnotations","baseAnnot","position","x","y","dy","dx","note","label","groupsFirstSection","filter","i","push","buildArmAnnotations","itemAnnotations","subject","wrap","depth","heightItem","annot","lib","objectSpread","lineType","radius","radiusPadding","connector","end","App","Switch","Route","exact","path","component","ReactDOM","render","HashRouter","src_App","document","getElementById"],"mappings":"4SAwCMA,EAAQC,EAAOC,IALD,SAACC,EAAMC,GACzB,OAAOC,OAAOC,OAAO,CAAEF,MAlCH,SAACG,GAErB,IAGMC,EAAeD,EAASE,SAASC,OACjCC,EAAaH,EAJG,IAI4CA,EAC5DI,EAAYC,KAAKC,KAAKN,EAAeG,GACrCI,EAAmBF,KAAKC,KAAKP,EAASS,YAAcL,GAAc,IAEpEM,EAAe,EACfC,EAAe,EACfC,EAAkB,EAkBtB,OAjBAZ,EAASE,SAASW,QAAQ,SAACC,EAASC,IAE9BH,EAAkBJ,GAAoBG,GAAgBN,KACxDM,EAAe,EACfC,EAAkB,EAClBF,GAA8B,GAGhCI,EAAO,MAAY,CACjBjB,GAAIa,EACJM,MAAOL,GAGTA,GAA8B,EAC9BC,GAAoCE,EAAQG,WAGvCjB,EAIsBkB,CAActB,MAY9BuB,EALK,kBAAM1B,GAKX0B,EAJC,SAACtB,GAAD,OAAQJ,EAAMI,IAIfsB,EAFO,kBAAM1B,EAAMU,iCCzC5BiB,EAAY,4DAkCHC,EA/BI,WAClB,IAAMC,EAAaC,OAAOC,SAASC,SACnC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,KAAGE,IAAI,WACND,UAAU,kBACVE,KAAI,+CAAAC,OAAkDV,IAChDI,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMC,IAAaC,KAAK,QAG9CV,EAAAC,EAAAC,cAAA,KAAGE,IAAI,UACND,UAAU,iBACVE,KAAI,yCAAAC,OAA4CZ,EAA5C,SAAAY,OAA6DV,IAC7DI,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMG,IAAWD,KAAK,QAG3CV,EAAAC,EAAAC,cAAA,KAAGE,IAAI,YACND,UAAU,mBACVE,KAAI,+CAAAC,OAAkDV,EAAlD,iBAAAU,OAA4EZ,EAA5E,WAAAY,OApBK,8BAqBNN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMI,IAAaF,KAAK,QAG7CV,EAAAC,EAAAC,cAAA,KAAGE,IAAI,WACND,UAAU,kBACVE,KAAI,sDAAAC,OAAyDV,EAAzD,WAAAU,OAA6EZ,EAA7E,YAAAY,OA1BK,8BA2BPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMK,IAAYH,KAAK,UCRrCI,EApBA,SAAAC,GAAA,IAAAC,EAAAD,EACXE,aADW,IAAAD,EACH,kBADGA,EAAAE,EAAAH,EAEXI,cAFW,IAAAD,EAEF,GAFEA,EAAAE,EAAAL,EAGXM,sBAHW,IAAAD,KAAA,OAKXpB,EAAAC,EAAAC,cAAA,cACKF,EAAAC,EAAAC,cAAA,UACOF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAE,KAASN,IAElBE,GAAUA,EAAO1C,OAAWuB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,OAA4BgB,GAAgB,KAEvEE,EACCrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,MACUH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mCAAR,YADV,MACmEL,EAAAC,EAAAC,cAAA,KAAGG,KAAK,qCAAR,mBAC5D,KAEhBL,EAAAC,EAAAC,cAACsB,EAAD,QCHOC,EAfA,SAAAV,GAAA,IAAAK,EAAAL,EAAGM,sBAAH,IAAAD,KAAA,OACXpB,EAAAC,EAAAC,cAAA,cACGF,EAAAC,EAAAC,cAAA,gFAAuEF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAG,UAAT,UACtEvB,EAAAC,EAAAC,cAAA,oDAA2CF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6CAA6CqB,OAAO,SAAUC,IAAI,uBAA1E,WAE1CN,EAECrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,cACiBH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mCAAR,YADjB,MAC0EL,EAAAC,EAAAC,cAAA,KAAGG,KAAK,qCAAR,mBAEpE,sDCRVuB,EAAY,SAACC,EAAGC,GACnB,IAAMC,EAAaD,EAAOvC,SAASsC,EAAEtC,UAC/ByC,EAAgBF,EAAOG,SAASJ,EAAEI,UAAY,EAC9CC,EAASJ,EAAO1B,IAAIyB,EAAEzB,KAAO2B,EAC7BI,EAAWL,EAAOM,MAAMP,EAAEO,OAASJ,EAAgBA,EAEzD,aAAA1B,OAAcyB,EAAd,mBAAAzB,QACO6B,EADP,KAAA7B,OAC4B,IAAT4B,EADnB,KAAA5B,QACoC0B,EADpC,KAAA1B,OACqD4B,EADrD,mBAAA5B,QAEO6B,EAFP,KAAA7B,OAE4B,GAAT4B,EAFnB,sBAAA5B,OAGM6B,EAHN,KAAA7B,OAG2B,GAAT4B,EAHlB,KAAA5B,OAGkC0B,EAHlC,KAAA1B,OAGmD4B,EAHnD,mBAAA5B,OAIM6B,EAJN,KAAA7B,OAI2B,IAAT4B,EAJlB,QAAA5B,OAIqCyB,IAGlCM,EAAgB,WACrB,IACM7D,EADO8D,IACSC,QAAQ,SAAAC,GAAI,OAAIA,EAAKhE,WAErCiE,EAAgBC,IAAUlE,EAAU,SAAAqD,GAAC,OAAIA,EAAEI,WAC3CU,EAAgBD,MAAiBE,OAAOH,GAGxCI,EAAaH,IAAUlE,EAAU,SAAAqD,GAAC,OAAIA,EAAEO,QACxCU,EAAaJ,MAAiBE,OAAO,CAFrB,GAEqCC,EAAW,KAAKE,MAAM,CAAC,GAAI,IAElFD,EAAWD,EAAW,IAAM,KAC/BC,EAAWF,OAAO,CAACC,EAAW,GALT,KAK6BE,MAAM,CAAC,IAAK,IAG/D,IAAMC,EAAO,GACbxE,EAASW,QAAQ,SAAA8D,GAAOD,EAAKC,EAAE7C,MAAO,IACtC,IAAM8C,EAAU9E,OAAO4E,KAAKA,GAAMG,KAAK,SAACC,EAAGH,GAAJ,OAAUG,EAAIH,IAC/CI,EAAWX,MACVE,OAAOM,GACPH,MAAM,CAAC,EAAG,IACVO,QAAQ,GAETC,EAAcb,IAAOlE,EAAU,SAAAqD,GAAC,OAAsB,IAAlBA,EAAE2B,MAAMlE,MAAcuC,EAAEtC,SAAW,IAG7E,MAAO,CACN0C,SAAUU,EACVP,MAAOU,EACP1C,IAAKiD,EACL9D,SANqBmD,MAAiBE,OAAO,CAAC,EAAGW,MAU7CE,6MAEL3B,OAASO,4EAEA,IAAAqB,EAAAC,KAAAC,EAEmCD,KAAKE,MAAxC3F,EAFA0F,EAEA1F,KAAMwC,EAFNkD,EAEMlD,KAAMoD,EAFZF,EAEYE,SAAUC,EAFtBH,EAEsBG,SAE9BJ,KAAKK,aAAatD,EAAMxC,EAAM4F,GAE9B,IAAIG,EAAa,EACbjF,EAAe,EACnB,OACCgB,EAAAC,EAAAC,cAAA,KAAG/B,GAAE,WAAAmC,OAAcpC,EAAKC,IAAOgC,UAAU,qBAEvCjC,EAAKM,SAASP,IAAI,SAACmB,GAClB,IAAM8E,EAAcH,IAAa3E,EAAQoE,MAAMrF,GAAK,GAAKiB,EAAQoE,MAAMlE,MAAQ,GACzE6E,EACLnE,EAAAC,EAAAC,cAAA,QACCE,IAAMhB,EAAQgF,MACdvC,EAAID,EAAUxC,EAASsE,EAAK5B,QAC5BuC,UAAS,gBAAA/D,OAAoB2D,EAApB,KAAA3D,OAAoC4D,EAAc,WAAY,IACvEI,QAAUP,EAAW,GAAM,GAG1BA,EAEC/D,EAAAC,EAAAC,cAACqE,EAAA,SAAD,KACCvE,EAAAC,EAAAC,cAAA,WAASsE,cAAc,UACXC,KAAK,MAAMlD,GAAG,IAAImD,KAAK,SACvBC,MAAK,GAAArE,OAAMlB,EAAQgF,MAAd,KACLQ,IAAG,GAAAtE,OAAMlB,EAAQG,SAAd,KACHsF,YAAc,IAEhBX,EAEClE,EAAAC,EAAAC,cAACqE,EAAA,SAAD,KACAvE,EAAAC,EAAAC,cAAA,oBAAkBsE,cAAc,YACrCM,KAAK,YAAYJ,KAAK,SACzBD,KAAI,MAAAnE,OAAU2D,GACd1C,GAAE,MAAAjB,OAAU2D,GACZU,MAAK,GAAArE,OAAMlB,EAAQgF,MAAd,KACFQ,IAAG,GAAAtE,OAAMlB,EAAQG,SAAd,KACHsF,YAAc,IACZ7E,EAAAC,EAAAC,cAAA,oBAAkBsE,cAAc,YAClCM,KAAK,QACRL,KAAK,MAAMlD,GAAG,MAAMmD,KAAK,SACzBC,MAAK,GAAArE,OAAMlB,EAAQgF,MAAd,KACFQ,IAAG,GAAAtE,OAAMlB,EAAQG,SAAd,KACHsF,YAAc,EAAIE,SAAS,SAEnB,MAGA,MASnB,OAJI/F,IAAiBI,EAAQoE,MAAMrF,KAClCa,EAAeI,EAAQoE,MAAMrF,GAC7B8F,EAAaA,EAAaP,EAAK5B,OAAOvC,SAASH,EAAQG,UAAY,GAE7D4E,0CAOCzD,EAAMxC,EAAM4F,GACxB,IAAMkB,EAAYtE,EAAQ,EACpBuE,EAAuB,GAAZD,EAIjB,GAHArB,KAAK7B,OAAOG,SAASc,MAAM,CAAC,EAAGkC,IAC/BtB,KAAK7B,OAAOvC,SAASwD,MAAM,CAAC,EAAGiC,IAE3BlB,EAAU,CACb,IAAMoB,EAAavB,KAAKwB,cAAcjH,EAAMwC,GAC5CiD,KAAK7B,OAAOG,SAASc,MAAM,CAAC,EAAGnE,KAAKwG,MAAMH,EAAWC,KACrDvB,KAAK7B,OAAOvC,SAASwD,MAAM,CAAC,EAAGnE,KAAKwG,MAAMJ,EAAYE,4CAI1ChH,EAAMwC,GAAM,IAAA2E,EAAA1B,KACrB2B,EAAc,EACdN,EAAY,EACZhG,EAAe,EACfuG,EAAc,EAWlB,OAVArH,EAAKM,SAASW,QAAQ,SAACC,GACtB,IAAIoG,EAAuBH,EAAKvD,OAAOvC,SAASH,EAAQG,UACpDP,IAAiBI,EAAQoE,MAAMrF,KAClCa,EAAeI,EAAQoE,MAAMrF,GAC7BmH,GAA4BE,EAC5BD,KAEDP,EAAYpG,KAAK6G,IAAIT,EAAYM,EAAcE,KAGxC9E,EAAO,GADfsE,GAAsC,EAAdO,UAjGCG,IAAMC,eAsGjClC,EAAamC,aAAe,CAC3BlF,KAAM,IACNoD,UAAU,EACVC,UAAU,GAGIN,QC5JToC,EAAO,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,KAE9BC,mLAEI,IAAAlC,EACmCD,KAAKE,MAAxC3F,EADA0F,EACA1F,KAAMwC,EADNkD,EACMlD,KAAMoD,EADZF,EACYE,SAAUC,EADtBH,EACsBG,SAC9B,OACC/D,EAAAC,EAAAC,cAAA,OACCC,UAAU,YACV4F,MAAOrF,EAAMsF,OAAQtF,GACrBV,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC+F,EAAD,CACC/H,KAAOA,EACPwC,KAAOA,EACPoD,SAAWA,EACXC,SAAUA,KAEZ/D,EAAAC,EAAAC,cAAA,KAAGmE,UAAS,aAAA/D,OAAgBI,EAAO,EAAvB,MAAAJ,OAA8BI,EAAO,EAArC,MAEVmF,EAAK5H,IAAI,SAACiI,GAAD,OACRlG,EAAAC,EAAAC,cAAA,KAAGE,IAAM8F,EACP/F,UAAU,OACVkE,UAAS,UAAA/D,OAAY4F,EAAZ,MACTlG,EAAAC,EAAAC,cAAA,OAAKG,KAAI,YAAAC,OAAepC,EAAKC,kBArBduH,IAAMC,eA+B9BG,EAAUF,aAAe,CACxBlF,KAAM,IACNoD,UAAU,GAGIgC,QCfAK,EAtBO,SAAApF,GAAA,IAAG7C,EAAH6C,EAAG7C,KAAMwC,EAATK,EAASL,KAAT,OAEnBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEdH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAE,SAAAjB,OAAWpC,EAAKC,KAEjB6B,EAAAC,EAAAC,cAACkG,EAAD,CACClI,KAAOA,EACPwC,KAAOA,IAEdV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,SAAKhC,EAAKmI,MACVrG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,aAAShC,EAAKoI,aCURC,EApBE,WACb,IAAMC,EAAOlE,IACb,OACEtC,EAAAC,EAAAC,cAAA,WAASC,UAAU,yCACjBH,EAAAC,EAAAC,cAACuG,EAAD,MACAzG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAEVqG,EAAKvI,IAAI,SAAC4D,GAAD,OACP7B,EAAAC,EAAAC,cAACwG,EAAD,CACEtG,IAAKyB,EAAE1D,GACPD,KAAM2D,EACNnB,KAAO,SAIjBV,EAAAC,EAAAC,cAACyG,EAAD,wBChBFC,EACE,OADFA,EAEE,OAGFC,EAAgB,SAACC,EAAQhC,GAI7B,eAAAxE,OAHsBwE,IAAS8B,EACNE,EAAS,EACTA,EAAS,IAI9BC,EAAU,SAACjC,GACf,OAAQA,IAAS8B,EACLI,IACAC,KAYCC,EATU,SAAAnG,GAAA,IAAI+F,EAAJ/F,EAAI+F,OAAQhC,EAAZ/D,EAAY+D,KAAZ,OACvB9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAKsF,EAAcC,EAAQhC,IAC/B9E,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAOuG,EAAQjC,GAAQpE,KAAK,KAAKyG,MAAM,aChBxDC,EAAe1E,MAAiBE,OAAO,CAAC,EAAG,IAAIG,MAAM,CAAC,EAAG,MA8EhDsE,6MAxEbC,MAAQ,CACNR,OAAQ,GACRS,aAAa,KAefC,YAAc,SAAAzG,GAAgBA,EAAbW,OACP+F,YACPC,EAAKC,SAAS,CAAEJ,aAAa,6EAGvB,IAAAK,EAEyBjE,KAAK2D,MAA7BC,EAFDK,EAECL,YAAaT,EAFdc,EAEcd,OAEf5I,EAAOoE,EAAiBwE,GACxBe,EAAWvF,IAA2B,EACtCwF,EAAqBlJ,KAAKmJ,MAAMX,EAAalJ,EAAK8J,UAExD,OACIhI,EAAAC,EAAAC,cAAA,WACEC,UAAU,kCACV8H,MAAO,CAAEH,mBAAkB,GAAAxH,OAAMwH,EAAN,MAAAxH,OAA8BwH,EAA9B,OAC3B9H,EAAAC,EAAAC,cAACuG,EAAD,CAAQxF,MAAQ/C,EAAKmI,KAAOlF,OAASjD,EAAKoI,OAASjF,gBAAiB,IACpErB,EAAAC,EAAAC,cAAA,YAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACC,IAAX2G,EAAgB,KAAO9G,EAAAC,EAAAC,cAACgI,EAAD,CAAkBpD,KAAO8B,EAAoBE,OAASA,IAChF9G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXoH,EAEEvH,EAAAC,EAAAC,cAACkG,EAAD,CACIhG,IAAMlC,EAAKC,GACXD,KAAOA,EACPwC,KAAO,IACPoD,UAAW,EACXC,UAAW,IAEf/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAIlB2G,IAAWe,EAAY,KAAO7H,EAAAC,EAAAC,cAACgI,EAAD,CAAkBpD,KAAO8B,EAAoBE,OAASA,KAGzF9G,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CACE/H,IAAMlC,EAAKkK,UACXjI,UAAU,oBACVkI,QAAUnK,EAAKkK,UACfE,QAAU3E,KAAK6D,YACfe,cAAgB5E,KAAK6E,wBAIzBxI,EAAAC,EAAAC,cAACyG,EAAD,CAAQtF,gBAAiB,wDA7DDwC,EAAOyD,GAAO,IACpCmB,EAAW5E,EAAM6E,MAAjBD,OACF3B,EAAS6B,SAASF,EAAOtK,GAAI,IACnC,OAAI2I,IAAWQ,EAAMR,OACZ,CACLA,OAAQA,EACRS,aAAa,GAGV,YAhBQ7B,IAAMC,+BCXnB/D,EAAY,SAACC,EAAGC,GACnB,IAAMC,EAAaD,EAAOvC,SAASsC,EAAEtC,UAC/ByC,EAAgBF,EAAOG,SAASJ,EAAEI,UAAY,EAC9CC,EAASJ,EAAO1B,IAAIyB,EAAEzB,KAAO2B,EAC7BI,EAAWL,EAAOM,MAAMP,EAAEO,OAASJ,EAAgBA,EAEzD,aAAA1B,OAAcyB,EAAd,kBAAAzB,QACO6B,EADP,KAAA7B,OAC4B,IAAT4B,EADnB,KAAA5B,QACoC0B,EADpC,KAAA1B,OACqD4B,EADrD,kBAAA5B,QAEO6B,EAFP,KAAA7B,OAE4B,GAAT4B,EAFnB,sBAAA5B,OAGM6B,EAHN,KAAA7B,OAG2B,GAAT4B,EAHlB,KAAA5B,OAGkC0B,EAHlC,KAAA1B,OAGmD4B,EAHnD,kBAAA5B,OAIM6B,EAJN,KAAA7B,OAI2B,IAAT4B,EAJlB,QAAA5B,OAIqCyB,IAgFzB6G,EACbhH,EADagH,EAjDO,WACrB,IACMpK,EADO8D,IACSC,QAAQ,SAAAC,GAAI,OAAIA,EAAKhE,WAErCiE,EAAgBC,IAAUlE,EAAU,SAAAqD,GAAC,OAAIA,EAAEI,WAC3CU,EAAgBD,MAAiBE,OAAOH,GAGxCI,EAAaH,IAAUlE,EAAU,SAAAqD,GAAC,OAAIA,EAAEO,QACxCU,EAAaJ,MAAiBE,OAAO,CAFrB,GAEqCC,EAAW,KAAKE,MAAM,CAAC,GAAI,IAElFD,EAAWD,EAAW,IAAM,KAC/BC,EAAWF,OAAO,CAACC,EAAW,GALT,KAK6BE,MAAM,CAAC,IAAK,IAG/D,IAAMC,EAAO,GACbxE,EAASW,QAAQ,SAAA8D,GAAOD,EAAKC,EAAE7C,MAAO,IACtC,IAAM8C,EAAU9E,OAAO4E,KAAKA,GAAMG,KAAK,SAACC,EAAGH,GAAJ,OAAUG,EAAIH,IAC/CI,EAAWX,MACVE,OAAOM,GACPH,MAAM,CAAC,EAAG,IACVO,QAAQ,GAETC,EAAcb,IAAOlE,EAAU,SAAAqD,GAAC,OAAqB,GAAjBA,EAAE2B,MAAMlE,MAAauC,EAAEtC,SAAW,IAO5E,MAAO,CACN0C,SAAUU,EACVP,MAAOU,EACP1C,IAAKiD,EACL9D,SAVqBmD,MAAiBE,OAAO,CAAC,EAAGW,IAWjDsF,WATuBnG,MAChBE,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,IACpBG,MAAM,CAAC,UAAW,UAAW,cAqBvB6F,EAVM,SAAClI,EAAMoB,GAC1B,IAAMkD,EAAYtE,EAAQ,EACpBuE,EAAuB,GAAZD,EAIjB,OAHAlD,EAAOG,SAASc,MAAM,CAAC,EAAGkC,IAC1BnD,EAAOvC,SAASwD,MAAM,CAAC,EAAGiC,IAEnBlD,GAIM8G,EA7EW,SAAC1K,EAAM4D,GAC9B,IAAImC,EAAa,EACbjF,EAAe,EACnB,OACCgB,EAAAC,EAAAC,cAAA,KAAG/B,GAAE,WAAAmC,OAAcpC,EAAKC,IAAOgC,UAAU,qBAEvCjC,EAAKM,SAASP,IAAI,SAACmB,GAClB,IAAM+E,EACLnE,EAAAC,EAAAC,cAAA,QACCE,IAAMhB,EAAQgF,MACdvC,EAAID,EAAUxC,EAAS0C,GACvBuC,UAAS,gBAAA/D,OAAoB2D,EAApB,OAUX,OALIjF,GAAgBI,EAAQoE,MAAMrF,KACjCa,EAAeI,EAAQoE,MAAMrF,GAC7B8F,EAAaA,EAAanC,EAAOvC,SAASH,EAAQG,UAAY,GAGxD4E,MC+NC2E,EAvPD,WAEZ,IAEMC,EAAczG,EAAiB,GACrC0G,QAAQC,IAAIF,GACWA,EAAYvK,SAASC,OAA5C,IAGMyK,EAAiBH,EAAYvK,SAAS,GAEtC2K,EAAYC,EAAmBC,KAAkBD,KACjDE,EAAkBF,EAAmBC,IAAkBD,KACvDG,EAAaH,EAAmBC,IAAmBD,KA4CnDI,EAtCsB,WAE1B,IAAMC,EACM,GADNA,EAEA,IAFAA,EAGA,GAGAD,EAAiB,CACrB,CAAEE,SAAW,CAAEC,EAbD,GAaeC,EAbf,GAa8BH,EAAoBI,GAAIJ,EAAcK,GAAIL,GACpFM,KAAM,CAAE9I,MAAM,SAAU+I,MAAM,4DAK5BC,EAAqBlB,EAAYvK,SAAS0L,OAAQ,SAAC9K,GACvD,OAA8B,GAAvBA,EAAQoE,MAAMlE,QAInB2E,EAAa,EAejB,OAdAgG,EAAmB9K,QAAS,SAACC,EAAQ+K,GAE1B,GAALA,IACFlG,GAAckF,EAAU5J,SAASH,EAAQG,UAEzCiK,EAAeY,KACb,CAAEV,SAAW,CAAEC,EA/BL,GA+BoB1F,EAAY2F,EA/BhC,GA+B+CH,EAAoBI,GAAIJ,EAAcK,GAAIL,EAAexF,GAChH8F,KAAM,CAAE9I,MAAM,GAAI+I,MAAM,SAOzBR,EAGca,GAEjBC,EAAkB,CACtB,CAAEZ,SAAW,CAAEC,EAAGJ,EAAWtH,SAASiH,EAAejH,UAAU,EAAG2H,EAAG,EAAGC,GAAI,EAAGC,GAAI,GACjFS,QAAS,CAAEvE,OAAQuD,EAAWhK,SAAS2J,EAAe3J,WACtDwK,KAAM,CAAE9I,MAAM,WAAY+I,MAAO,mCAAqCQ,KAAM,KAE9E,CAAEd,SAAW,CAAEC,GAAKJ,EAAWtH,SAASiH,EAAejH,UAAU,EAAG2H,EAAGL,EAAWhK,SAAS2J,EAAe3J,UA/CxF,GA+CiHsK,GAAI,EAAGC,GAAI,GAC5IS,QAAS,CAAExE,MAAOwD,EAAWtH,SAASiH,EAAejH,WACrD8H,KAAM,CAAE9I,MAAM,WAAY+I,MAAO,oCAEnC,CAAEN,SAAW,CAAEC,GAAKJ,EAAWtH,SAASiH,EAAejH,UAAU,EAnD/C,GAmDgE2H,EAAG,EAAGC,GAAI,EAAGC,GAAI,GACjGS,QAAS,CAAEvE,OAAQuD,EAAWnJ,IAAI8I,EAAe9I,KAAOmJ,EAAWhK,SAAS2J,EAAe3J,UAAWkL,OAAQ,IAC9GV,KAAM,CAAE9I,MAAM,MAAO+I,MAAO,4CAA6CQ,KAAM,MAInF,OACExK,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACuG,EAAD,MAEAzG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAEdH,EAAAC,EAAAC,cAAA,oCAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACkG,EAAD,CACElI,KAAO6K,EACPrI,KApFa,IAqFboD,UAAW,KAIf9D,EAAAC,EAAAC,cAAA,uKAC8CF,EAAAC,EAAAC,cAAA,oBAD9C,gDAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,IAAyCH,EAAAC,EAAAC,cAAA,mDAAzC,KACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,IAA0CH,EAAAC,EAAAC,cAAA,uDAA1C,MAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAEfH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,iGAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAK6F,MAvGU,IAuGaC,OAAQqD,IAClCrJ,EAAAC,EAAAC,cAAA,KAAGmE,UAAS,aAAA/D,OA3FJ,GA2FI,MAAAA,OA3FJ,GA2FI,YAAuD,IAAvD,MACT8I,EAAwBL,EAAaI,MAK5CnJ,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,4KACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAK6F,MAlHU,IAkHaC,OAlHb,KAmHbhG,EAAAC,EAAAC,cAAA,KAAGmE,UAAS,aAAA/D,OAtGJ,GAsGI,MAAAA,OAtGJ,GAsGI,MACVN,EAAAC,EAAAC,cAAA,KAAG/B,GAAE,WAAAmC,OAAcyI,EAAY5K,IAAOgC,UAAU,qBAGhD4I,EAAYvK,SAASP,IAAI,SAACmB,EAAQ+K,GAUlC,OAPCnK,EAAAC,EAAAC,cAAA,QACCE,IAAMhB,EAAQgF,MACdvC,EAAIuH,EAAgBhK,EAASkK,GAC7BjF,UAAS,aAAA/D,OAAiB6J,EAxHrB,EACAd,GAuHI,MAAA/I,OAvHJ+I,GAuHuDzK,KAAKmJ,MAAMoC,EAxHlE,GAwHI,aAYjBnK,EAAAC,EAAAC,cAAA,2IACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAK6F,MA3IU,IA2IaC,OA1IjBqD,KA2ITrJ,EAAAC,EAAAC,cAAA,KAAGmE,UAAS,aAAA/D,OAAiB+I,IAAjB,MAAA/I,OAAwCoK,IAAenB,EAAWhK,SAAS2J,EAAe3J,UAAU,EAApG,MACVS,EAAAC,EAAAC,cAAA,KAAG/B,GAAE,WAAAmC,OAAcyI,EAAY5K,IAAOgC,UAAU,qBACnDH,EAAAC,EAAAC,cAAA,QACCE,IAAM8I,EAAe9E,MACrBvC,EAAIuH,EAAgBF,EAAgBK,MAKhCe,EAAgBrM,IAAI,SAAC0M,EAAMR,GACzB,OACDnK,EAAAC,EAAAC,cAAC0K,EAAA,kBAADxM,OAAAC,OAAA,CACE+B,IAAK+J,GACEQ,EAAMjB,SAFf,CAGKvC,MA5ID,OA6IC4C,KAAI3L,OAAAyM,EAAA,EAAAzM,CAAA,GACCuM,EAAMZ,MAEXQ,QAAOnM,OAAAyM,EAAA,EAAAzM,CAAA,GACFuM,EAAMJ,QADJ,CAELzF,KAAO,eAOpB9E,EAAAC,EAAAC,cAAC0K,EAAA,wBAAD,CACKjB,EAzJM,GA0JNC,EA1JM,GA2JNC,IAAK,GACLC,GAAI,GACJ3C,MA9JK,OA+JL4C,KAAM,CAAC9I,MAAQ,QACb+I,MAAQ,8BACRc,SAAW,cACbP,QAAS,CAACQ,OAAS,GAAGC,cAAgB,QAO9ChL,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,gBAArB,wFAAoHF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6CAAR,yBAApH,IACAL,EAAAC,EAAAC,cAAA,kBADA,+EAGAF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAK6F,MA9LU,IA8LaC,OA9Lb,KA+LXhG,EAAAC,EAAAC,cAAA,KAAGmE,UAAS,aAAA/D,OAlLN,GAkLM,MAAAA,OAlLN,GAkLM,YAAuD,IAAvD,MACT8I,EAAwBL,EAAaI,IAItCK,EAAevL,IAAI,SAAC0M,EAAMR,GACxB,OACEnK,EAAAC,EAAAC,cAAC0K,EAAA,uBAADxM,OAAAC,OAAA,CACE+B,IAAK+J,GACDQ,EAAMjB,SAFZ,CAGEvC,MA3LD,OA4LC4C,KAAI3L,OAAAyM,EAAA,EAAAzM,CAAA,GACCuM,EAAMZ,KADP,CAEFS,KAAO,IACPM,SAAW,eACbG,UAAW,CAACnG,KAAO,OAAOoG,IAAM,gBAQ9ClL,EAAAC,EAAAC,cAAA,uFAEAF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAAA,+IAAsIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,oCAAR,yBAAtI,6DAEAL,EAAAC,EAAAC,cAAA,+MACAF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,4FAAR,kBADA,oCAEOL,EAAAC,EAAAC,cAAA,KAAGG,KAAK,4FAAR,kBAFP,2HAGyCL,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6CAAR,mBAHzC,qFAKDL,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,8NACAF,EAAAC,EAAAC,cAAA,4HAKLF,EAAAC,EAAAC,cAACyG,EAAD,QCtOWwE,yDARH,kBACRnL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,KACEpL,EAAAC,EAAAC,cAACmL,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYjF,IAClCvG,EAAAC,EAAAC,cAACmL,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAY1C,IACvC9I,EAAAC,EAAAC,cAACmL,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAYnE,iBCZ1CoE,IAASC,OACN1L,EAAAC,EAAAC,cAACyL,GAAA,EAAD,KACE3L,EAAAC,EAAAC,cAAC0L,EAAD,OAGHC,SAASC,eAAe","file":"static/js/main.603c1996.chunk.js","sourcesContent":["import source from \"../data/new-year-songs.json\";\n\nconst groupSections = (songData) => {\n  // shared constants\n  const maxGroupCount = 5;\n  const maxPerGroup = 4;\n  // related to the song\n  const sectionTotal = songData.sections.length;\n  const groupTotal = sectionTotal > maxGroupCount ? maxGroupCount : sectionTotal;\n  const groupSize = Math.ceil(sectionTotal / groupTotal);\n  const maxGroupDuration = Math.ceil(songData.duration_ms / groupTotal) / 1000;\n  // gropping\n  let currentGroup = 0;\n  let currentOrder = 0;\n  let currentDuration = 0;\n  songData.sections.forEach((section, idx) => {\n\n    if (currentDuration > maxGroupDuration || currentOrder >= groupSize) {\n      currentOrder = 0;\n      currentDuration = 0;\n      currentGroup = currentGroup + 1;\n    }\n\n    section[\"group\"] = {\n      id: currentGroup,\n      order: currentOrder,\n    };\n\n    currentOrder = currentOrder + 1;\n    currentDuration = currentDuration + section.duration;\n  });\n\n  return songData;\n}\n\nconst processSong = (song, id) => {\n  return Object.assign({ id }, groupSections(song));\n}\n// our data doen't change dynamically\n// so we don't need to recalculate it on each request to data provider\nconst songs = source.map(processSong);\n\nconst getTitles = () => songs.map((d) => d.Song);\nconst getAllSongs = () => songs;\nconst getSong = (id) => songs[id];\nconst getSongUrl = (id) => `https://open.spotify.com/embed/track/${songs[id].track_id}`;\nconst getSongsCount = () => songs.length;\n\nexport default {\n\tgetTitles,\n  getAllSongs,\n  getSong,\n  getSongUrl,\n  getSongsCount\n};\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFacebookF, faTwitter, faLinkedin, faPinterest } from '@fortawesome/free-brands-svg-icons';\n\nconst shareText = \"The best New Year songs as Snowflakes! ❄❄❄\";\nconst shareImage = \"./img/snowflakes-home.PNG\";\n\nconst ShareLinks = () => {\n\tconst currentUrl = window.location.hostname;\n\treturn (\n\t\t<div className=\"socialfloat\">\n\t    \t<a key=\"facebook\"\n\t    \t\tclassName=\"button facebook\"\n\t    \t\thref= {`http://www.facebook.com/sharer/sharer.php?u=${currentUrl}` }>\n\t            <FontAwesomeIcon icon={faFacebookF} size=\"lg\" />\n\t        </a>\n\n\t      \t<a key=\"twitter\"\n\t      \t\tclassName=\"button twitter\" \n\t      \t\thref={ `https://twitter.com/intent/tweet?text=${shareText}&url=${currentUrl}`}>\n\t            <FontAwesomeIcon icon={faTwitter} size=\"lg\" />\n\t        </a>\n\t        \n\t        <a key=\"pinterest\"\n\t        \tclassName=\"button pinterest\" \n\t        \thref={ `http://pinterest.com/pin/create/button/?url=${currentUrl}&description=${shareText}&media=${shareImage}`}>\n\t            <FontAwesomeIcon icon={faPinterest} size=\"lg\" />\n\t        </a>\n\t        \n\t        <a key=\"linkedin\"\n\t        \tclassName=\"button linkedin\" \n\t        \thref={ `http://www.linkedin.com/shareArticle?mini=true&url=${currentUrl}&title=${shareText}&source=${shareImage}` }>\n\t           <FontAwesomeIcon icon={faLinkedin} size=\"lg\" />\n\t        </a>\n\t    </div>\n\t);\n};\n\nexport default ShareLinks;","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nimport ShareLinks from \"./ShareLinks\";\n\nconst Header = ({ \n    title = \"Snowflake Songs\",\n    singer = \"\",\n    createdByBlock = true \n}) => (\n    <header>\n        \t<h1>\n                <Link to={`/`}>{ title }</Link>\n            </h1>\n            { (singer && singer.length) ? (<p className=\"singer\"> by { singer }</p>) : null }\n            {\n                createdByBlock ?\n                (<p className=\"autors\">\n                        by <a href=\"https://twitter.com/MaryZamCode\">Mary Zam</a> & <a href=\"https://twitter.com/edithmaulandi\">Edith Maulandi</a>\n                </p>) : null\n            }\n        <ShareLinks />\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer = ({ createdByBlock = false }) => (\n    <footer>\n      \t<p>To learn about snowflake build process, legend, and metodology read <Link to=\"/About\">About</Link></p>\n        <p>Source code & full data set availabe on <a href=\"http://github.com/maryzam/snowflake-songs/\" target=\"_blank\"  rel=\"noopener noreferrer\">GitHub</a></p>\n        { \n        \tcreatedByBlock ?\n        \t(\n        \t\t<p className=\"autors\">\n\t               Created by <a href=\"https://twitter.com/MaryZamCode\">Mary Zam</a> & <a href=\"https://twitter.com/edithmaulandi\">Edith Maulandi</a>\n\t            </p>\n            ) :\tnull\n        }\n    </footer>\n);\n\nexport default Footer;\n","import React, { Fragment } from 'react';\nimport * as d3 from 'd3';\n\nimport Provider from \"../../utils/dataProvider\";\n\nconst buildItem = (d, scales) => {\n\t\t\tconst itemHeight = scales.duration(d.duration);\n\t\t\tconst itemHalfWidth = scales.loudness(d.loudness) / 2;\n\t\t\tconst midPos = scales.key(d.key) * itemHeight;\n\t\t\tconst slopePos = scales.tempo(d.tempo) * itemHalfWidth + itemHalfWidth;\n\n\t\t\treturn `M 0 ${itemHeight} \n\t\t\t\t\tQ ${-slopePos} ${midPos * 1.1} ${-itemHalfWidth} ${midPos} \n\t\t\t\t\tQ ${-slopePos} ${midPos * 0.9} 0 0\n\t\t\t\t\tQ ${slopePos} ${midPos * 0.9} ${itemHalfWidth} ${midPos} \n\t\t\t\t\tQ ${slopePos} ${midPos * 1.1}0 0 ${itemHeight}`;\n\t\t};\n\nconst prepareScales = () => {\n\tconst data = Provider.getAllSongs();\n\tconst sections = data.flatMap(item => item.sections);\n\n\tconst loudnessRange = d3.extent(sections, d => d.loudness);\n\tconst scaleLoudness = d3.scaleLinear().domain(loudnessRange);\n\n\tconst moderatoTempo = 80;\n\tconst tempoRange = d3.extent(sections, d => d.tempo);\n\tconst scaleTempo = d3.scaleLinear().domain([moderatoTempo, tempoRange[1]]).range([0, -3]);\n\n\tif (scaleTempo(tempoRange[0]) > 1.5) {\n\t\tscaleTempo.domain([tempoRange[0], moderatoTempo]).range([1.5, 0]);\n\t}\t\t\n\n\tconst keys = {};\n\tsections.forEach(s => { keys[s.key] = true });\n\tconst allKeys = Object.keys(keys).sort((f, s) => f - s);\n\tconst scaleKey = d3.scalePoint()\n\t\t\t\t\t\t\t.domain(allKeys)\n\t\t\t\t\t\t\t.range([0, 1])\n\t\t\t\t\t\t\t.padding(1);\n\n\tconst maxDuration = d3.max(sections, d => d.group.order === 0 ? d.duration : 0);\n\tconst scaleDuration = d3.scaleLinear().domain([0, maxDuration]);\n\n\treturn {\n\t\tloudness: scaleLoudness,\n\t\ttempo: scaleTempo,\n\t\tkey: scaleKey,\n\t\tduration: scaleDuration\n\t};\n};\n\nclass SnowflakeRay extends React.PureComponent { \n\n\tscales = prepareScales();\n\n\trender() {\n\n\t\tconst { song, size, maximize, animated } = this.props;\n\t\t\n\t\tthis.updateScales(size, song, maximize);\n\t\t\n\t\tlet currentPos = 0;\n\t\tlet currentGroup = 0;\n\t\treturn (\n\t\t\t<g id={`pattern_${ song.id }`} className=\"snowflake-section\">\n\t\t\t\t{\n\t\t\t\t\tsong.sections.map((section) => {\n\t\t\t\t\t\tconst shouldScale = animated && (section.group.id > 2 || section.group.order > 0);\n\t\t\t\t\t\tconst element = (\n\t\t\t\t\t\t\t<path \n\t\t\t\t\t\t\t\tkey={ section.start }\n\t\t\t\t\t\t\t\td={ buildItem(section, this.scales) }\n\t\t\t\t\t\t\t\ttransform={ `translate(0, ${ currentPos })${ shouldScale ? \"scale(0)\": \"\"}` }\n\t\t\t\t\t\t\t\topacity={ animated ? 0.1 : 1 }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tanimated \n\t\t\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t\t<animate attributeName=\"opacity\" \n\t\t\t\t\t\t\t\t               from=\"0.1\" to=\"1\" fill=\"freeze\"\n\t\t\t\t\t\t\t\t               begin={ `${section.start}s` } \n\t\t\t\t\t\t\t\t               dur={ `${section.duration}s` }\n\t\t\t\t\t\t\t\t               repeatCount={ 1 } />\n\t\t\t\t\t\t\t\t            {\n\t\t\t\t\t\t\t\t            \tshouldScale ?\n\t\t\t\t\t\t\t\t            \t(\n\t\t\t\t\t\t\t\t            \t\t<Fragment>\n\t\t\t\t\t\t\t\t            \t\t<animateTransform attributeName=\"transform\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t    type=\"translate\" fill=\"freeze\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom={ `0, ${ currentPos }`} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tto={ `0, ${ currentPos }` }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbegin={ `${section.start}s` } \n\t\t\t\t\t\t\t\t\t\t\t\t\t    dur={ `${section.duration}s` }\n\t\t\t\t\t\t\t\t\t\t\t\t\t    repeatCount={ 1 } />\n\t\t\t\t\t\t\t\t\t\t\t        <animateTransform attributeName=\"transform\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t    type=\"scale\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom=\"0 0\" to=\"1 1\" fill=\"freeze\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbegin={ `${section.start}s` } \n\t\t\t\t\t\t\t\t\t\t\t\t\t    dur={ `${section.duration}s` }\n\t\t\t\t\t\t\t\t\t\t\t\t\t    repeatCount={ 1 } additive=\"sum\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t            \t) : null\n\t\t\t\t\t\t\t\t            }\t\t\t\t\t\t\t\t            \n\t\t\t\t\t\t\t            </Fragment>\n               \t\t\t\t\t\t) : null\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</path>\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (currentGroup !== section.group.id) {\n\t\t\t\t\t\t\tcurrentGroup = section.group.id;\n\t\t\t\t\t\t\tcurrentPos = currentPos + this.scales.duration(section.duration) + 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</g>\n\t\t);\n\t}\n\n\tupdateScales(size, song, maximize) {\n\t\tconst maxHeight = size / (5);\n\t\tconst maxWidth = maxHeight * 0.2;\n\t\tthis.scales.loudness.range([0, maxWidth]);\n\t\tthis.scales.duration.range([0, maxHeight]);\n\t\t// we need to recalculate it one more time to fit exactly to fill whole svg\n\t\tif (maximize) {\n\t\t\tconst scaleCoeff = this.getScaleCoeff(song, size);\n\t\t\tthis.scales.loudness.range([0, Math.round(maxWidth * scaleCoeff)]);\n\t\t\tthis.scales.duration.range([0, Math.round(maxHeight * scaleCoeff)]);\n\t\t}\n\t}\n\n\tgetScaleCoeff(song, size) {\n\t\tlet groupHeight = 0;\n\t\tlet maxHeight = 0;\n\t\tlet currentGroup = 0;\n\t\tlet totalGroups = 0;\n\t\tsong.sections.forEach((section) => {\n\t\t\tlet currentSectionHeight = this.scales.duration(section.duration);\n\t\t\tif (currentGroup !== section.group.id) {\n\t\t\t\tcurrentGroup = section.group.id\n\t\t\t\tgroupHeight = groupHeight + currentSectionHeight;\n\t\t\t\ttotalGroups++;\n\t\t\t} \n\t\t\tmaxHeight = Math.max(maxHeight, (groupHeight + currentSectionHeight));\n\t\t});\n\t\tmaxHeight = maxHeight + totalGroups * 2;\n\t\treturn (size / 2 / maxHeight);\n\t}\n}\n\nSnowflakeRay.defaultProps = {\n\tsize: 300,\n\tmaximize: false,\n\tanimated: false\n};\n\nexport default SnowflakeRay;","import React from 'react';\n\nimport SnowflakeRay from './SnowflakeRay';\n\nconst rays = [0, 60, 120, 180, 240, 300];\n\nclass Snowflake extends React.PureComponent { \n\n\trender() {\n\t\tconst { song, size, maximize, animated } = this.props;\n\t\treturn (\n\t\t\t<svg \n\t\t\t\tclassName=\"snowflake\"\n\t\t\t\twidth={size} height={size} >\n\t\t\t\t<def>\n\t\t\t\t\t<SnowflakeRay \n\t\t\t\t\t\tsong={ song }\n\t\t\t\t\t\tsize={ size }\n\t\t\t\t\t\tmaximize={ maximize } \n\t\t\t\t\t\tanimated={animated} />\n\t\t\t\t</def>\n\t\t\t\t<g transform={ `translate(${size / 2}, ${ size / 2})` }>\n\t\t\t\t\t{\n\t\t\t\t\t\trays.map((angle) => (\n\t\t\t\t\t\t\t<g key={ angle }\n\t\t\t\t\t\t\t \tclassName=\"line\"\n\t\t\t\t\t\t\t \ttransform={`rotate(${angle})`}>\n\t\t\t\t\t\t\t \t<use href={`#pattern_${ song.id }`}/>\n\t\t\t\t\t\t\t </g>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\t}\n}\n\nSnowflake.defaultProps = {\n\tsize: 300,\n\tmaximize: false\n};\n\nexport default Snowflake;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Snowflake from './Snowflake/Snowflake';\n\nconst SnowflakeCard = ({ song, size }) => (\n\n\t\t\t<div className=\"snowflake-card\">\n\n\t\t\t\t<Link to={`/song/${song.id}`}>\n\n\t\t\t        <Snowflake \n\t\t\t        \tsong={ song }\n\t\t\t        \tsize={ size } />\n\n\t\t\t\t\t<div className=\"title-wrap\">\n\t\t\t\t\t\t<p>{ song.name }</p>\n\t\t\t\t\t\t<p><small>{ song.artist }</small></p>\n\t\t\t\t\t</div>\n\n\t\t\t\t</Link>\n\n\n\t\t\t</div>\n\n\t);\n\nexport default SnowflakeCard;\n","import React from 'react';\nimport Provider from \"../utils/dataProvider\";\n\nimport Header from \"./Header/Header\";\nimport Footer from \"./Footer\";\nimport SnowflakeCard from \"./SnowflakeCard\";\n\nconst AllSongs = () => {\n    const data = Provider.getAllSongs();\n    return (\n      <article className=\"all-songs colorful-background dynamic\">\n        <Header />\n        <main className=\"songs-container\">\n            {\n              data.map((d) => (\n                <SnowflakeCard \n                  key={d.id} \n                  song={d} \n                  size={ 300 }/>\n              ))            \n            }\n        </main>\n        <Footer />\n      </article>\n  );\n};\n\nexport default AllSongs;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\nconst BUTTON_TYPES = {\n  NEXT: \"next\",\n  PREV: \"prev\"\n}\n\nconst getTargetLink = (songId, type) => {\n  const targetSongId = (type === BUTTON_TYPES.NEXT) \n                        ? (songId + 1) \n                        : (songId - 1);\n  return `/song/${ targetSongId }`;\n}\n\nconst getIcon = (type) => {\n  return (type === BUTTON_TYPES.NEXT) \n            ? faChevronRight \n            : faChevronLeft;\n}\n\nconst NavigationButton = ( { songId, type } ) => (\n  <div className=\"navigation-button\">\n    <Link to={ getTargetLink(songId, type) }>\n      <FontAwesomeIcon icon={ getIcon(type) } size=\"2x\" color=\"white\"/>\n    </Link>\n  </div>\n);\n\nexport { BUTTON_TYPES };\nexport default NavigationButton;\n","import React from 'react';\nimport YouTube from 'react-youtube';\nimport * as d3 from 'd3';\n\nimport Provider from \"../utils/dataProvider\";\n\nimport Header from \"./Header/Header\";\nimport Footer from \"./Footer\";\nimport Snowflake from \"./Snowflake/Snowflake\";\nimport NavigationButton, { BUTTON_TYPES } from \"./Navigation/Button\";\n\nconst scaleValence = d3.scaleLinear().domain([0, 1]).range([0, 100]);\n\nconst videoOptions = { playerVars: { autoplay: 1 } };\n\nclass Song extends React.PureComponent  {\n\n  state = {\n    songId: \"\",\n    isSongReady: false\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { params } = props.match;\n    const songId = parseInt(params.id, 10);\n    if (songId !== state.songId) {\n      return { \n        songId: songId,\n        isSongReady: false \n      }\n    }\n    return null;\n  }\n\n  onSongReady = ({ target }) => {\n     target.playVideo();\n     this.setState({ isSongReady: true });\n  }\n\n  render() {\n    \n    const { isSongReady, songId } = this.state; \n\n    const song = Provider.getSong(songId);\n    const lastSong = Provider.getSongsCount() - 1;\n    const backgroundPosition = Math.floor(scaleValence(song.valence));\n\n    return (\n        <article \n          className=\"single-song colorful-background\"\n          style={{ backgroundPosition: `${ backgroundPosition }% ${backgroundPosition}%` }}>\n          <Header title={ song.name } singer={ song.artist } createdByBlock={ false } />\n          <main>\n\n            <div className=\"content\">\n              { (songId === 0) ? null : <NavigationButton type={ BUTTON_TYPES.PREV } songId={ songId } /> }\n              <div className=\"grow\">\n                {\n                  isSongReady \n                  ? (\n                    <Snowflake \n                        key={ song.id }\n                        song={ song }\n                        size={ 500 } \n                        maximize={ true }\n                        animated={ true } />\n                  ) : (\n                    <div className=\"preloader\"></div>\n                  )\n                }\n              </div>\n              { (songId === lastSong) ? null : <NavigationButton type={ BUTTON_TYPES.NEXT } songId={ songId } /> }\n            </div>\n\n            <YouTube \n              key={ song.youtubeId }\n              className=\"background-player\"\n              videoId={ song.youtubeId }\n              onReady={ this.onSongReady } \n              onStateChange={ this.onPlayerStateChanged } \n            />\n\n          </main>\n          <Footer createdByBlock={ true } />\n        </article>\n    );    \n  }\n}\n\nexport default Song;\n","import React from 'react';\nimport Provider from \"../utils/dataProvider\";\nimport * as d3 from 'd3';\n\nconst buildItem = (d, scales) => {\n\t\t\tconst itemHeight = scales.duration(d.duration);\n\t\t\tconst itemHalfWidth = scales.loudness(d.loudness) / 2;\n\t\t\tconst midPos = scales.key(d.key) * itemHeight;\n\t\t\tconst slopePos = scales.tempo(d.tempo) * itemHalfWidth + itemHalfWidth;\n\n\t\t\treturn `M 0 ${itemHeight}\n\t\t\t\t\tQ ${-slopePos} ${midPos * 1.1} ${-itemHalfWidth} ${midPos}\n\t\t\t\t\tQ ${-slopePos} ${midPos * 0.9} 0 0\n\t\t\t\t\tQ ${slopePos} ${midPos * 0.9} ${itemHalfWidth} ${midPos}\n\t\t\t\t\tQ ${slopePos} ${midPos * 1.1}0 0 ${itemHeight}`;\n\t\t};\n\nconst renderSongPattern = (song, scales) => {\n\t\t\tlet currentPos = 0;\n\t\t\tlet currentGroup = 0;\n\t\t\treturn (\n\t\t\t\t<g id={`pattern_${ song.id }`} className=\"snowflake-section\">\n\t\t\t\t\t{\n\t\t\t\t\t\tsong.sections.map((section) => {\n\t\t\t\t\t\t\tconst element = (\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tkey={ section.start }\n\t\t\t\t\t\t\t\t\td={ buildItem(section, scales) }\n\t\t\t\t\t\t\t\t\ttransform={ `translate(0, ${ currentPos })` }\n\t\t\t\t\t\t\t\t\t/*stroke= { this.scales.groupColor(section.group.order) }*/\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (currentGroup != section.group.id) {\n\t\t\t\t\t\t\t\tcurrentGroup = section.group.id;\n\t\t\t\t\t\t\t\tcurrentPos = currentPos + scales.duration(section.duration) + 2;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn element;\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</g>\n\t\t\t);\n\t\t}\n\nconst prepareScales = () => {\n\tconst data = Provider.getAllSongs();\n\tconst sections = data.flatMap(item => item.sections);\n\n\tconst loudnessRange = d3.extent(sections, d => d.loudness);\n\tconst scaleLoudness = d3.scaleLinear().domain(loudnessRange);\n\n\tconst moderatoTempo = 80;\n\tconst tempoRange = d3.extent(sections, d => d.tempo);\n\tconst scaleTempo = d3.scaleLinear().domain([moderatoTempo, tempoRange[1]]).range([0, -3]);\n\n\tif (scaleTempo(tempoRange[0]) > 1.5) {\n\t\tscaleTempo.domain([tempoRange[0], moderatoTempo]).range([1.5, 0]);\n\t}\n\n\tconst keys = {};\n\tsections.forEach(s => { keys[s.key] = true });\n\tconst allKeys = Object.keys(keys).sort((f, s) => f - s);\n\tconst scaleKey = d3.scalePoint()\n\t\t\t\t\t\t\t.domain(allKeys)\n\t\t\t\t\t\t\t.range([0, 1])\n\t\t\t\t\t\t\t.padding(1);\n\n\tconst maxDuration = d3.max(sections, d => d.group.order == 0 ? d.duration : 0);\n\tconst scaleDuration = d3.scaleLinear().domain([0, maxDuration]);\n\n\tconst scaleGroupColor = d3.scaleOrdinal()\n\t\t\t\t\t\t\t\t.domain([0, 1, 2, 3, 4])\n\t\t\t\t\t\t\t\t.range([\"#216594\", \"#913371\", \"#DE7F5F\"]);\n\n\treturn {\n\t\tloudness: scaleLoudness,\n\t\ttempo: scaleTempo,\n\t\tkey: scaleKey,\n\t\tduration: scaleDuration,\n\t\tgroupColor: scaleGroupColor\n\t};\n};\n\nconst updateScales = (size, scales) => {\n  const maxHeight = size / (5);\n  const maxWidth = maxHeight * 0.2;\n  scales.loudness.range([0, maxWidth]);\n  scales.duration.range([0, maxHeight]);\n  \n  return scales;\n}\n\n\nexport default {\n  buildItem,\n  prepareScales,\n  updateScales,\n\trenderSongPattern\n};","import React from 'react';\nimport { AnnotationBracket, AnnotationCalloutElbow, AnnotationCalloutCircle } from 'react-annotation';\n\nimport Provider from \"../utils/dataProvider\";\nimport Build from \"../utils/snowflakesBuild\";\n\nimport Snowflake from './Snowflake/Snowflake';\nimport Header from \"./Header/Header\";\nimport Footer from \"./Footer\";\n\nconst setUpArmLegend = () => {\n  \n}\n\nconst About = () => {\n  \n  const sizeSnowflakes = 300;\n  const heightItem = sizeSnowflakes*1.3;\n  const songExample = Provider.getSong(1);\n  console.log(songExample);\n  const sectionsNumber = songExample.sections.length ;\n  const itemsByRow = 4;\n  const itemsSpace = sizeSnowflakes / itemsByRow ;\n  const sectionExample = songExample.sections[0];\n  \n  const armScales = Build.updateScales(sizeSnowflakes*4, Build.prepareScales());\n  const itemsListScales = Build.updateScales(sizeSnowflakes*3, Build.prepareScales());\n  const itemScales = Build.updateScales(sizeSnowflakes*10, Build.prepareScales());\n  \n  const svgMargin = 30;\n  const annotColor = \"grey\";\n  const annotMargin = 10;\n  \n  const buildArmAnnotations = () => {\n\n    const baseAnnot = {\n      yPadding: 20,\n      dy: 100,\n      dx: 50\n    };\n  \n    const armAnnotations = [\n      { position : { x: svgMargin, y: svgMargin + baseAnnot.yPadding, dy: baseAnnot.dy, dx: baseAnnot.dx}, \n        note: { title:\"Groups\", label:\"Sections are grouped by order to enable a nice overlap\"}\n      }\n    ];\n    \n    //get first section of each group\n    const groupsFirstSection = songExample.sections.filter( (section) => {\n      return section.group.order == 0;\n    });\n  \n    //add empty arrow for each group\n    let currentPos = 0;\n    groupsFirstSection.forEach( (section,i) => {\n      \n      if (i != 0) {\n        currentPos += armScales.duration(section.duration);\n        \n        armAnnotations.push(\n          { position : { x: svgMargin + currentPos, y: svgMargin + baseAnnot.yPadding, dy: baseAnnot.dy, dx: baseAnnot.dx - currentPos},\n            note: { title:\"\", label:\"\"}\n          }\n        );\n\n      }\n    });\n    \n    return armAnnotations;\n  };\n\n  const armAnnotations = buildArmAnnotations();\n  \n  const itemAnnotations = [\n    { position : { x: itemScales.loudness(sectionExample.loudness)/2, y: 0, dy: 0, dx: 0}, \n      subject: { height: itemScales.duration(sectionExample.duration) },\n      note: { title:\"Duration\", label: \"is encoded as height of the item\",  wrap: 60 }\n    },\n    { position : { x: - itemScales.loudness(sectionExample.loudness)/2, y: itemScales.duration(sectionExample.duration) + annotMargin, dy: 0, dx: 0}, \n      subject: { width: itemScales.loudness(sectionExample.loudness) },\n      note: { title:\"Loudness\", label: \"is encoded as width of the item\" }\n    },\n    { position : { x: - itemScales.loudness(sectionExample.loudness)/2 - annotMargin, y: 0, dy: 0, dx: 0}, \n      subject: { height: itemScales.key(sectionExample.key) * itemScales.duration(sectionExample.duration), depth: -10 },\n      note: { title:\"Key\", label: \"is encoded as the height of the mid point\", wrap: 60 }\n    }\n  ];\n  \n  return (\n    <div>\n    \n      <Header />\n      \n      <main className=\"about\">\n\n        <h2> Legend & Explanation </h2>\n        \n        <div className=\"svg-horiz-centered\">\n          <Snowflake\n            song={ songExample }\n            size={ sizeSnowflakes }\n            maximize={ true }\n          />\n        </div>\n        \n        <p> Each snowflake is built from a song audio attributes : some from the overall song and some from song parts. \n        The background of the song encode its overall <b>Valence</b>, which describes its musical positiveness :</p>\n        \n        <div className=\"color-legend\">\n          <div className=\"color-legend-text left\"> <p> 0 : sound more sad, depressed, angry </p> </div>\n          <div className=\"color-legend-text right\"> <p> 1 : sound more happy, cheerful, euphoric </p> </div>\n        </div>\n        <div className=\"colorful-rectangle\"></div>\n        \n        <br></br>\n\n        <p> Snowflakes have six arms, which are the same one repeated and rotated for 6 angles.</p>\n        \n        <div className=\"svg-horiz-centered\">\n          <svg width={sizeSnowflakes} height={sizeSnowflakes/4}>\n            <g transform={ `translate(${ svgMargin }, ${ svgMargin }) rotate(${270})`} >\n              {Build.renderSongPattern(songExample, armScales) }\n            </g>\n          </svg>\n        </div>\n        \n        <br></br>\n\n        <p> Snowflakes arms are built from  the song's list of sections. Those are parts of the song that have different attributes as duration, tempo, key and loudness. </p>\n        <div className=\"svg-horiz-centered\">\n          <svg width={sizeSnowflakes} height={sizeSnowflakes}>\n            <g transform={ `translate(${ svgMargin }, ${ svgMargin })`} >\n              <g id={`pattern_${ songExample.id }`} className=\"snowflake-section\">\n        \t\t\t\t{\n        \t\t\t\t  \n        \t\t\t\t  songExample.sections.map((section,i) => {\n\n        \t\t\t\t    const element = (\n        \t\t\t\t\t\t\t<path \n        \t\t\t\t\t\t\t\tkey={ section.start }\n        \t\t\t\t\t\t\t\td={ Build.buildItem(section, itemsListScales) }\n        \t\t\t\t\t\t\t\ttransform={ `translate(${ i % itemsByRow * itemsSpace }, ${ Math.floor(i / itemsByRow) * itemsSpace })` }\n        \t\t\t\t\t\t\t\t/>\n        \t\t\t\t\t\t);\n        \t\t\t\t\t\t\n        \t\t\t\t\t\treturn element;\n        \t\t\t\t  })\n        \t\t\t\t}\n        \t\t\t</g>\n            </g>\n          </svg>\n        </div>\n        \n        <p> Every section result in an item giving its specific properties, where scales range are computed from the whole songs list. : </p>\n        <div className=\"svg-horiz-centered\">\n          <svg width={sizeSnowflakes} height={heightItem}>\n            <g transform={ `translate(${ sizeSnowflakes/2 }, ${ heightItem/2 - itemScales.duration(sectionExample.duration)/2 })`} >\n              <g id={`pattern_${ songExample.id }`} className=\"snowflake-section\">\n    \t\t\t\t\t\t\t<path \n    \t\t\t\t\t\t\t\tkey={ sectionExample.start }\n    \t\t\t\t\t\t\t\td={ Build.buildItem(sectionExample, itemScales) }\n    \t\t\t\t\t\t\t\t/>\n        \t\t\t</g>\n        \t\t\t\n        \t\t\t{\n                itemAnnotations.map((annot,i) => {\n                  return (\n              \t\t\t<AnnotationBracket\n              \t\t\t  key={i}\n                      {...annot.position}\n                      color={annotColor}\n                      note={{\n                        ...annot.note \n                      }}\n                      subject={{\n                        ...annot.subject,\n                        \"type\":\"curly\"\n                      }}\n                    />\n                  )\n                })\n        \t\t\t}\n        \t\t\t\n        \t\t\t<AnnotationCalloutCircle\n                x={annotMargin}\n                y={annotMargin}\n                dy={-30}\n                dx={30}\n                color={annotColor}\n                note={{\"title\":\"Tempo\",\n                  \"label\":\"is encoded as the curviness\",\n                  \"lineType\":\"horizontal\"}}\n                subject={{\"radius\":20,\"radiusPadding\":3}}\n              />\n            \n            </g>\n          </svg>\n        </div>\n        \n        <p> In each section, <b>Key</b> represent the overall keu of the section from 0 (C key) to 11 (B key) following the <a href=\"https://en.wikipedia.org/wiki/Pitch_class\"> pitch class notation</a>. \n        <b>Tempo</b> attribute is encoded as concave for a low tempo and convex for a high one.</p>\n        \n        <br></br>\n       \n        <p> Items are grouped to overlap : </p>\n        <div className=\"svg-horiz-centered\">\n          <svg width={sizeSnowflakes} height={sizeSnowflakes}>\n              <g transform={ `translate(${ svgMargin }, ${ svgMargin }) rotate(${270})`} >\n                {Build.renderSongPattern(songExample, armScales) }\n              </g>\n              \n              {\n                armAnnotations.map((annot,i) => {\n                  return (\n                    <AnnotationCalloutElbow\n                      key={i}\n                      {...annot.position}\n                      color={annotColor}\n                      note={{\n                        ...annot.note,\n                        \"wrap\":150,\n                        \"lineType\":\"horizontal\"}}\n                      connector={{\"type\":\"line\",\"end\":\"arrow\"}} />\n                  )\n                })\n              }\n  \n            </svg>\n          </div>\n\n        <p> Items and others experiments can be found in the draft folder on github. </p>\n\n        <br></br>\n\n\n        <h2> Methodology </h2>\n\n\n        <p> Starting from the topic of Christams songs, we spend some time searching for data and nice stories. One great inspiration was the <a href=\"https://insights.spotify.com/us/\">Spotify Insights blog</a>. And finally a great New Year's playlist won the deal ! </p>\n\n        <p> We purposefully choose not to use lyrics. After some thoughts, we decided to use the Spotify API to easily retrieve songs data. Spotify API offer a quite detailed song data for each song track : \n        <a href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\">audio features</a> - global song attributes -\n          and  <a href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/\">audio analysis</a> - detail song attribute by song's sections and even smaller parts (segments).\n        We used python with Jupyter Notebook and <a href=\"https://spotipy.readthedocs.io/en/latest/\">Spotipy library</a> to easily retrieve data given a playlist or a list of song with their tracks ID.</p>\n\n       <p> The main steps then were the following : </p>\n       <ol>\n         <li> Get to know audio features & analysis attributes </li>\n         <li> Select attributes to encode in the visualisation. Our main choice here was to only use sections as segments were really small duration parts of songs, and use some of the global attributes - mainly Valence. </li>\n         <li> Retrive data with Spotify API and Spotipy library, deleted unused attributes and convert the list to JSON. </li>\n       </ol>\n       \n    </main>\n    \n    <Footer />\n\n    </div>\n\t);\n\t\n}\n\nexport default About;\n","import React from 'react';\nimport { Switch, Route} from \"react-router-dom\";\n\nimport AllSongs from \"./components/AllSongs\";\nimport Song from \"./components/Song\";\nimport About from \"./components/About\";\n\nimport './style/social-share.css';\nimport './style/layout.css';\nimport './style/snowflake.css';\nimport './style/header.css';\nimport './style/footer.css';\nimport './style/single-song.css';\nimport './style/about.css';\nimport './style/preloader.css';\n\nconst App = () => (\n    <Switch>\n      <Route exact path='/' component={ AllSongs }/>\n      <Route exact path='/about' component={ About }/>\n      <Route path='/song/:id' component={ Song }/>\n    </Switch>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport { HashRouter} from \"react-router-dom\";\n\nReactDOM.render((\n\t  <HashRouter>\n\t    <App />\n\t  </HashRouter>\n  ),\n  document.getElementById('root'));\n"],"sourceRoot":""}