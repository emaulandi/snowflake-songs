{"version":3,"sources":["logo.svg","components/Header.js","components/Footer.js","components/SnowflakeCard.js","utils/dataProvider.js","components/Songs.js","components/Song.js","components/About.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Link","to","href","index_es","icon","faFacebookF","size","faTwitter","faPinterest","faLinkedin","Footer","SnowflakeCard","props","concat","song","id","width","height","cx","cy","r","title","songTitle","spotifyID","dataProvider","getTitles","songs","map","d","getMainInfo","i","getSong","Songs","data","Provider","console","log","components_SnowflakeCard","call","Song","num","parseInt","match","params","number","trackURL","SongTitle","src","frameBorder","allowtransparency","allow","About","Main","Switch","Route","exact","path","component","App","components_Header","components_Main","components_Footer","Component","Boolean","window","location","hostname","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a71b26d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFacebookF } from '@fortawesome/free-brands-svg-icons'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons'\nimport { faPinterest } from '@fortawesome/free-brands-svg-icons'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => (\n    <header>\n      <div className=\"wrapper\">\n        <h1>Christmas songs as snowflakes</h1>\n        <p>Hello</p>\n\n        <Link to={`/about`}> About </Link>\n        <Link to={`/`}> Home </Link>\n\n        <div className=\"socialfloat\">\n\n\n            <a className=\"button facebook\" href=\"http://www.facebook.com/sharer/sharer.php?u=YOUR-URL\">\n              <FontAwesomeIcon icon={faFacebookF} size=\"lg\" />\n            </a>\n\n          <a className=\"button twitter\" href=\"https://twitter.com/intent/tweet?text=YOUR-TEXT&url=YOUR-URL&via=TWITTER-HANDLER\">\n            <FontAwesomeIcon icon={faTwitter} size=\"lg\" />\n          </a>\n          <a className=\"button pinterest\" href=\"http://pinterest.com/pin/create/button/?url=YOUR-URL&description=YOUR-DESCRIPTION&media=YOUR-IMAGE-SRC\">\n            <FontAwesomeIcon icon={faPinterest} size=\"lg\" />\n          </a>\n          <a className=\"button linkedin\" href=\"http://www.linkedin.com/shareArticle?mini=true&url=YOUR-URL&title=YOUR-TITLE&source=YOUR-URL\">\n            <FontAwesomeIcon icon={faLinkedin} size=\"lg\" />\n          </a>\n        </div>\n\n      </div>\n\n\n    </header>\n\t);\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => (\n    <footer>\n      <div className=\"wrapper\">\n        <p>Footer</p>\n      </div>\n    </footer>\n\t);\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\n\nconst SnowflakeCard = (props) => (\n\n\t\t\t<div className=\"snowflake-card\">\n\n\t\t\t\t<Link to={`/song/${props.song.id}`}>\n\n\t        <svg width=\"200\" height=\"200\">\n\n\t\t\t\t\t<circle cx=\"100\" cy=\"100\" r=\"80\"/>\n\n\t\t\t\t\t{/*\n\t        <rect width=\"200\" height=\"200\" />\n\t\t\t\t\t*/}\n\n\t        </svg>\n\n\t\t\t\t\t<div className=\"titleWrap\">\n\t\t\t\t\t\t<p>{props.song.title}</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t</Link>\n\n\n\t\t\t</div>\n\n\t);\n\nexport default SnowflakeCard;\n","import songs from \"../data/all-songs.json\";\n\nconst songTitle = 'SongTitle';\nconst spotifyID = 'Spotify ID';\n\n\nfunction getTitles() {\n\treturn songs.map((d) => (d[songTitle]));\n}\n\nfunction getMainInfo() {\n  return songs.map( (d,i) => {\n    return {\n      id: i,\n      title: d[songTitle],\n      spotifyID: d[spotifyID]\n    }\n  });\n}\n\nfunction getSong(id) {\n  return songs[id];\n}\n\nexport default {\n\tgetTitles,\n  getMainInfo,\n  getSong\n};\n","import React from 'react';\n\nimport SnowflakeCard from \"./SnowflakeCard\";\n\nimport Provider from \"../utils/dataProvider\";\n\nfunction renderSongs() {\n    {/*const data = [...Array(20).keys()]*/}\n\n    const data = Provider.getMainInfo();\n    console.log(data);\n\n    return data.map( (d) => {\n    \t\treturn <SnowflakeCard song={d}/>;\n    });\n}\n\nconst Songs = () => (\n    <div className=\"wrapper\">\n      <div className=\"songs-container\">\n\n      {renderSongs.call(this)}\n\n      </div>\n  </div>\n\n\t);\n\nexport default Songs;\n","import React from 'react';\nimport Provider from \"../utils/dataProvider\";\n\nconst Song = (props) => {\n\n  const num = parseInt(props.match.params.number, 10);\n\n  const song = Provider.getSong(num);\n  const trackURL = \"https://open.spotify.com/embed/track/\" + song['Spotify ID'];\n  console.log(song);\n\n  return (\n    <div className=\"song\">\n\n      <svg width=\"500\" height=\"500\">\n\n        <circle cx=\"250\" cy=\"250\" r=\"200\"/>\n\n      </svg>\n\n      <p> {song.SongTitle} </p>\n      <iframe src={trackURL} width=\"300\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n    </div>\n  );\n\n}\n\nexport default Song;\n","import React from 'react';\n\nconst About = () => (\n    <div>\n      <div className=\"wrapper\">\n\n        <p>This is an explanation of the methodology </p>\n\n      </div>\n    </div>\n\t);\n\nexport default About;\n","import React from 'react';\n\nimport { Switch, Route} from \"react-router-dom\";\n\nimport Songs from \"./Songs\";\nimport Song from \"./Song\";\nimport About from \"./About\";\n\nconst Main = () => (\n  <main>\n    <Switch>\n      <Route exact path='/' component={Songs}/>\n      <Route exact path='/about' component={About}/>\n      <Route path='/song/:number' component={Song}/>\n    </Switch>\n  </main>\n)\n\nexport default Main;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Main from \"./components/Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n      <Header/>\n\n      <Main/>\n\n      <Footer/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter} from \"react-router-dom\";\n\n\n\nReactDOM.render((\n  <HashRouter>\n    <App />\n  </HashRouter>\n  ),\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}